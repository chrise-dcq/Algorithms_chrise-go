/*
01背包——动态规划方法求解
给定N种物品和一个容量为c的背包，
物品i的体积是wi，其价值是vi;
求解应如何选择装入背包中的物品，使得背包中物品的总价值最大？

思路：自底向上的方式计算出最优值。
*/

#include<stdio.h>

#define max(a,b) ((a) > (b) ? a : b)
#define N 5
#define C 10

int w[] = {0,3,5,2,7,4};   //对应物品i的容量
int v[] = {0,2,4,1,6,5};   //物品i的价值

int m[N][C] = {0};
//m[i][c] = max{ m[i-1][c] , m[i-1][c - w[i]] + w[i]}
//m[i][c]是背包容量为c，可选物品种类为i时0-1背包问题的最优值，即最大总价值
 

int main()
{
	int i,j,k,l;
    for(i = 1; i <= N; i++)
        for(j = 1; j <= C ;j++)     //背包的容量
        {
            if(w[i] > j)//如果背包的容量，放不下w[i]，则不选w[i]
                m[i][j] = m[i-1][j]; //可装入物品的种类减1（减去当前种类的物品），背包的容量不变       
            else
            {
                m[i][j] = max(m[i-1][j], m[i-1][j - w[i]] + v[i]);
				//自底向上过程中，每次取值都比较之前和当前的值，取最优的
				//m[i-1][j]：不装入当前种类物品情况下的最优值
				//m[i-1][j - w[i]] + v[i]：装入当前种类物品，则可用总容量减去当前物品占去的容量，最优值要加上当前物品的价值
            }
        }

		for(k = 1; k < 6; k++){
			printf("\n");
			for(l = 1; l <= 10 ;l++)
			{
				printf("%d  ",m[k][l]); ;
			}
		}
		printf("\n");
		printf("this is result:%d\n",m[5][10]);
	    return 0;
}